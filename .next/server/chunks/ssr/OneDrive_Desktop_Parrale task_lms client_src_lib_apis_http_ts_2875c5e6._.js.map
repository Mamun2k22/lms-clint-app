{"version":3,"sources":["turbopack:///[project]/OneDrive/Desktop/Parrale task/lms client/src/lib/apis/http.ts"],"sourcesContent":["const BASE = process.env.NEXT_PUBLIC_API_BASE!;\r\n\r\n/** Client-side calls (adds Bearer from localStorage) */\r\nexport async function api<T = unknown>(path: string, init: RequestInit = {}): Promise<T> {\r\n  const token = typeof window !== \"undefined\" ? localStorage.getItem(\"token\") : null;\r\n  const headers = new Headers(init.headers);\r\n  if (!headers.has(\"Content-Type\")) headers.set(\"Content-Type\", \"application/json\");\r\n  if (token) headers.set(\"Authorization\", `Bearer ${token}`);\r\n  const res = await fetch(`${BASE}${path}`, { ...init, headers, cache: \"no-store\" });\r\n  if (!res.ok) throw await res.json().catch(() => ({ message: res.statusText }));\r\n  return (await res.json()) as T;\r\n}\r\n\r\n/** Server-side fetch (no token) for public endpoints */\r\nexport async function serverApi<T = unknown>(path: string, init: RequestInit = {}): Promise<T> {\r\n  const res = await fetch(`${BASE}${path}`, { ...init, cache: \"no-store\" });\r\n  if (!res.ok) throw await res.json().catch(() => ({ message: res.statusText }));\r\n  return (await res.json()) as T;\r\n}\r\n"],"names":[],"mappings":"4EAAA,IAAM,EAAA,wBAGC,eAAe,EAAiB,CAAY,CAAE,EAAoB,CAAC,CAAC,EAEzE,IAAM,EAAU,IAAI,QAAQ,EAAK,OAAO,CACpC,CAAC,EAAQ,GAAG,CAAC,iBAAiB,EAAQ,GAAG,CAAC,eAAgB,oBAE9D,IAAM,EAAM,MAAM,MAAM,CAAA,EAAG,EAAA,EAAO,EAAA,CAAM,CAAE,CAAE,GAAG,CAAI,SAAE,EAAS,MAAO,UAAW,GAChF,GAAI,CAAC,EAAI,EAAE,CAAE,MAAM,MAAM,EAAI,IAAI,GAAG,KAAK,CAAC,IAAM,CAAC,CAAE,QAAS,EAAI,UAAU,CAAC,CAAC,EAC5E,OAAQ,MAAM,EAAI,IAAI,EACxB,CAGO,eAAe,EAAuB,CAAY,CAAE,EAAoB,CAAC,CAAC,EAC/E,IAAM,EAAM,MAAM,MAAM,CAAA,EAAG,EAAA,EAAO,EAAA,CAAM,CAAE,CAAE,GAAG,CAAI,CAAE,MAAO,UAAW,GACvE,GAAI,CAAC,EAAI,EAAE,CAAE,MAAM,MAAM,EAAI,IAAI,GAAG,KAAK,CAAC,IAAM,CAAC,CAAE,QAAS,EAAI,UAAU,CAAC,CAAC,EAC5E,OAAQ,MAAM,EAAI,IAAI,EACxB"}